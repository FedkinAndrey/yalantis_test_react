{"version":3,"sources":["types/user.ts","store/action-creators/users.ts","types/list.ts","store/action-creators/list.ts","store/action-creators/index.ts","hooks/useAction.ts","components/UserItem.tsx","components/UserList.tsx","api/API.ts","hooks/useTypedSelector.ts","components/DobItem.tsx","components/DobList.tsx","pages/Employees.tsx","App.tsx","store/reducers/userReducer.ts","store/reducers/listDobReducer.ts","store/reducers/index.ts","store/browser-storage.ts","store/index.ts","index.tsx"],"names":["UserActionTypes","ListActionTypes","fetchEmployees","dispatch","a","type","FETCH_USERS","axios","get","response","setTimeout","FETCH_USERS_SUCCESS","payload","data","FETCH_USERS_ERROR","addUsers","user","ADD_USER","removeUsers","REMOVE_USER","UserActionCreators","ListActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","UserItem","activeUsers","useState","state","setstate","useEffect","arr","id","includes","handleOptionChange","event","target","value","className","firstName","lastName","checked","onChange","UserList","letter","employees","filter","item","startsWith","sort","b","localeCompare","filteredUsersByAlphabet","length","map","useTypedSelector","useSelector","DobItem","month","date","Date","dob","getDate","getFullYear","DobList","filteredUsers","monthId","getMonth","filteredUserByMonth","Employees","React","memo","users","usersList","list","actualCalendar","year","slice","concat","convertCalendar","idArray","App","initialState","loading","error","rootReducer","combineReducers","action","newItems","newUser","find","undefined","active","push","filteredArray","KEY","serializedState","JSON","stringify","localStorage","setItem","e","persistedState","getItem","parse","loadState","store","createStore","applyMiddleware","thunk","subscribe","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5427b20.chunk.js","sourcesContent":["import {IUser} from \"./types\";\n\nexport interface UserState {\n  users: IUser[];\n  loading: boolean;\n  error: null | string;\n}\n\nexport enum UserActionTypes {\n  FETCH_USERS = 'FETCH_USERS',\n  FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS',\n  FETCH_USERS_ERROR = 'FETCH_USERS_ERROR'\n}\n\ninterface FetchUserAction {\n  type: UserActionTypes.FETCH_USERS;\n}\n\ninterface FetchUserSuccessAction {\n  type: UserActionTypes.FETCH_USERS_SUCCESS;\n  payload: any[];\n}\n\ninterface FetchUserErrorAction {\n  type: UserActionTypes.FETCH_USERS_ERROR;\n  payload: string;\n}\n\nexport type UserAction = FetchUserAction | FetchUserSuccessAction | FetchUserErrorAction","import axios from \"axios\";\r\nimport { Dispatch } from \"redux\";\r\nimport { IUser } from \"../../types/types\";\r\nimport { UserAction, UserActionTypes } from \"../../types/user\";\r\n\r\nexport const fetchEmployees = () => {\r\n  return async (dispatch: Dispatch<UserAction>) => {\r\n    try {\r\n      dispatch({ type: UserActionTypes.FETCH_USERS });\r\n      const response = await axios.get<IUser[]>(\r\n        \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\r\n      );\r\n      setTimeout(() => {\r\n        dispatch({\r\n            type: UserActionTypes.FETCH_USERS_SUCCESS,\r\n            payload: response.data\r\n          });\r\n      }, 500);\r\n    \r\n    } catch (e) {\r\n      dispatch({\r\n        type: UserActionTypes.FETCH_USERS_ERROR,\r\n        payload: \"ERROR\",\r\n      });\r\n    }\r\n  };\r\n};\r\n","import { IUser } from \"./types\";\n\nexport interface ListState {\n  usersList: IUser[];\n}\n\nexport enum ListActionTypes {\n  ADD_USER = \"ADD_USER\",\n  REMOVE_USER = \"REMOVE_USER\",\n}\n\ninterface AddUserAction {\n  type: ListActionTypes.ADD_USER;\n  payload: IUser;\n}\n\ninterface RemoveUserAction {\n  type: ListActionTypes.REMOVE_USER;\n  payload: IUser;\n}\n\nexport type ListAction = AddUserAction | RemoveUserAction;\n","import {Dispatch} from \"redux\";\nimport {ListAction, ListActionTypes} from \"../../types/list\";\nimport {IUser} from \"../../types/types\";\n\nexport const addUsers = (user: IUser) => {\n  return (dispatch: Dispatch<ListAction>) => {\n    dispatch({\n      type: ListActionTypes.ADD_USER,\n      payload: user\n    });\n  }\n}\n\nexport const removeUsers = (user: IUser) => {\n  return (dispatch: Dispatch<ListAction>) => {\n    dispatch({\n      type: ListActionTypes.REMOVE_USER,\n      payload: user\n    });\n  }\n}\n","import * as UserActionCreators from './users'\nimport * as ListActionCreators from './list'\n\nexport default {\n  ...UserActionCreators,\n  ...ListActionCreators\n}","import {useDispatch} from \"react-redux\"\r\nimport {bindActionCreators} from \"redux\"\r\nimport ActionCreators from '../store/action-creators/'\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch()\r\n  return bindActionCreators(ActionCreators, dispatch)\r\n}","import React, { FC, useEffect, useState } from \"react\";\nimport { IUser } from \"../types/types\";\nimport { useActions } from \"../hooks/useAction\";\n\ninterface UserItemProps {\n  user: IUser;\n  activeUsers: string[];\n}\n\nconst UserItem: FC<UserItemProps> = ({ user, activeUsers }) => {\n  const [state, setstate] = useState(\"false\");\n\n  const checkId = (arr: string[], id: string): boolean => {\n    const checked = arr.includes(id);\n    return checked;\n  };\n\n  useEffect(() => {\n    if (checkId(activeUsers, user.id)) {\n      setstate(\"true\");\n    } else {\n      setstate(\"false\");\n    }\n  }, [activeUsers]);\n\n  const { addUsers } = useActions();\n  const { removeUsers } = useActions();\n\n  const handleOptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setstate(event.target.value);\n    if (event.target.value === \"false\") {\n      removeUsers(user);\n    } else {\n      addUsers(user);\n    }\n  };\n\n  return (\n    <div className=\"userItem\">\n      <div className={state === \"true\" ? \"name active\" : \"name\"}>\n        <span>\n          {user.firstName} {user.lastName}\n        </span>\n      </div>\n      <div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"false\"\n              checked={state === \"false\"}\n              onChange={handleOptionChange}\n            />\n            not active\n          </label>\n        </div>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"true\"\n              checked={state === \"true\"}\n              onChange={handleOptionChange}\n            />\n            active\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserItem;\n","import React, { FC } from \"react\";\nimport { filteredUsersByAlphabet } from \"../api/API\";\nimport { IUser } from \"../types/types\";\nimport UserItem from \"./UserItem\";\n\ninterface UserListProps {\n  letter: string;\n  employees: IUser[];\n  activeUsers: string[];\n}\n\nconst UserList: FC<UserListProps> = ({ letter, employees, activeUsers }) => {\n  const arr = filteredUsersByAlphabet(letter, employees);\n\n  return (\n    <div className=\"container\">\n      <h3>{letter}</h3>\n      {arr.length !== 0 ? (\n        arr.map((user) => (\n          <UserItem key={user.id} user={user} activeUsers={activeUsers} />\n        ))\n      ) : (\n        <div className=\"userItem\">No Employees</div>\n      )}\n    </div>\n  );\n};\n\nexport default UserList;\n","import { IUser } from \"../types/types\";\r\n\r\nexport const convertCalendar = (month: Date, year: string[]) => {\r\n  return year.slice(month.getMonth()).concat(year.slice(0, month.getMonth()));\r\n};\r\n\r\nexport const filteredUsersByAlphabet = (\r\n  letter: string,\r\n  arr: IUser[]\r\n): IUser[] => {\r\n  const newArr = arr.filter((item) => {\r\n    return item.lastName.startsWith(letter);\r\n  });\r\n  return newArr.sort(function (a, b) {\r\n    return a.firstName.localeCompare(b.firstName);\r\n  });\r\n};\r\n\r\nexport const filteredUserByMonth = (monthId: number, arr: IUser[]): IUser[] => {\r\n  const newArr = arr.filter((item) => {\r\n    return new Date(item.dob).getMonth() === monthId;\r\n  });\r\n\r\n  return newArr.sort(function (a, b) {\r\n    return a.lastName.localeCompare(b.lastName);\r\n  });\r\n};\r\n","import {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {RootState} from \"../store/reducers\";\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import React, {FC} from 'react';\nimport {IUser} from \"../types/types\";\n\ninterface DobItemProps {\n  month: string;\n  user: IUser;\n}\n\nconst DobItem:FC<DobItemProps> = ({month, user}) => {\n  const date = new Date(user.dob)\n\n  return (\n    <div>\n      {user.firstName} {user.lastName} - {date.getDate()} {month}, {date.getFullYear()} year\n    </div>\n  );\n};\n\nexport default DobItem;\n","import React, { FC } from \"react\";\nimport { filteredUserByMonth } from \"../api/API\";\nimport { IUser } from \"../types/types\";\nimport DobItem from \"./DobItem\";\n\ninterface DobListProps {\n  month: string;\n  monthId: number;\n  employees: IUser[];\n}\n\nconst DobList: FC<DobListProps> = ({ month, monthId, employees }) => {\n  const filteredUsers = filteredUserByMonth(monthId, employees);\n\n  return (\n    <div className=\"container\">\n      <h3>{month}</h3>\n      <ul>\n        {filteredUsers.length !== 0\n          ? filteredUsers.map((user) => (\n              <li key={user.id}>\n                <DobItem user={user} month={month} />\n              </li>\n            ))\n          : \"No Employees\"}\n      </ul>\n    </div>\n  );\n};\n\nexport default DobList;\n","import React, { useEffect } from \"react\";\nimport UserList from \"../components/UserList\";\nimport { useTypedSelector } from \"../hooks/useTypedSelector\";\nimport { useActions } from \"../hooks/useAction\";\nimport DobList from \"../components/DobList\";\nimport { convertCalendar } from \"../api/API\";\n\nconst Employees = React.memo(() => {\n  const alphabet: string[] = [\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\",\n    \"G\",\n    \"H\",\n    \"I\",\n    \"J\",\n    \"K\",\n    \"L\",\n    \"M\",\n    \"N\",\n    \"O\",\n    \"P\",\n    \"Q\",\n    \"R\",\n    \"S\",\n    \"T\",\n    \"U\",\n    \"V\",\n    \"W\",\n    \"X\",\n    \"Y\",\n    \"Z\",\n  ];\n\n  const year = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const { fetchEmployees } = useActions();\n  const { users } = useTypedSelector((state) => state.user);\n  const { usersList } = useTypedSelector((state) => state.list);\n  const actualCalendar = convertCalendar(new Date, year)\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const idArray: string[] = usersList.map((item) => item.id);\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"left\">\n        <h2>Employees</h2>\n        <div className=\"left__container\">\n          {users.length !== 0\n            ? alphabet.map((item, id) => (\n                <UserList\n                  letter={item}\n                  employees={users}\n                  activeUsers={idArray}\n                  key={id}\n                />\n              ))\n            : \"Empty\"}\n        </div>\n      </div>\n\n      <div className=\"right\">\n        <h2>Employees birthday</h2>\n        <div className=\"right__container\">\n          {usersList.length !== 0\n            ? actualCalendar.map((item, id) => (\n                <DobList\n                  month={item}\n                  monthId={id}\n                  employees={usersList}\n                  key={id}\n                />\n              ))\n            : \"Employees List is empty\"}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default Employees;\n","import React from 'react';\nimport Employees from \"./pages/Employees\";\nimport './style.css'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Employees/>\n    </div>\n  );\n}\n\nexport default App;\n","import {UserAction, UserActionTypes, UserState} from \"../../types/user\";\n\nconst initialState: UserState = {\n  users: [],\n  loading: false,\n  error: null\n}\n\nexport const userReducer = (state = initialState, action: UserAction): UserState => {\n  switch (action.type) {\n    case UserActionTypes.FETCH_USERS:\n      return {loading: true, error: null, users: []}\n    case UserActionTypes.FETCH_USERS_SUCCESS:\n      return {loading: true, error: null, users: action.payload}\n    case UserActionTypes.FETCH_USERS_ERROR:\n      return {loading: true, error: action.payload, users: []}\n    default:\n      return state\n  }\n}","import {ListAction, ListActionTypes, ListState} from \"../../types/list\";\n\nconst initialState: ListState = {\n  usersList: [],\n};\n\nexport const listReducer = (\n  state = initialState,\n  action: ListAction\n): ListState => {\n  switch (action.type) {\n    case ListActionTypes.ADD_USER: {\n      const newItems = {...state};\n      newItems.usersList = [...state.usersList];\n\n      const newUser = state.usersList.find(\n        (user) => user.id === action.payload.id\n      );\n\n      if (newUser === undefined) {\n        action.payload.active = true\n        newItems.usersList.push(action.payload);\n        return {\n          ...newItems,\n          usersList: newItems.usersList,\n        };\n      } else {\n        return state;\n      }\n    }\n    case ListActionTypes.REMOVE_USER: {\n      action.payload.active = false\n      const newItems = {...state};\n      newItems.usersList = [...state.usersList];\n\n      const filteredArray = newItems.usersList.filter(\n        (item) => item.id !== action.payload.id\n      );\n\n      return {...state, usersList: filteredArray};\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { userReducer } from \"./userReducer\";\nimport {listReducer} from \"./listDobReducer\";\n\nexport const rootReducer = combineReducers({\n  user: userReducer,\n  list: listReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","const KEY = \"redux\";\nexport function loadState() {\n  try {\n    const serializedState = localStorage.getItem(KEY);\n    if (!serializedState) return undefined;\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport async function saveState(state: any) {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(KEY, serializedState);\n  } catch (e) {\n    // Ignore\n  }\n}","import {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {rootReducer} from \"./reducers\";\nimport {loadState} from \"./browser-storage\";\n\n\nconst persistedState = loadState()\n\nexport const store = createStore(rootReducer, persistedState, applyMiddleware(thunk));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store\";\nimport {saveState} from \"./store/browser-storage\";\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}